/* function example to test functions with auto return types, including recursive functions without any base cases
 * from which the return type can be deduced. The functions also consider different orderings of the return statements.
 * For example, if the first encounter of a return statement is a recursive call (i.e. the type has not yet been deduced,
 * but the second encounter of a return statement is a object (i.e. the return type can be deduced), then no semantic
 * error should be reported.
 */

 // The following two examples, foo1 and foo2, illustrate order independence; they should report no semantic errors
 auto foo1(x:int){
    if(x < 1){
        return 1;
    }else{
        return foo1(x - 1);
    }
 }

 auto foo2(x:int){
    if(1 <= x){
        return foo2(x - 1);
    }else{
        return 1;
    }
 }

 /* Since TeaLang(1/2) requires matching operand types, we can deduce the return of foo3.
  * (even if it can never return). */
  auto foo3(x:int){
     return 1 * foo3(x - 1);
  }

 // However this one does: with no return statement having a determinate type, a semantic error is reported.
 auto foo4(x:int){
    return foo4(x - 1);
 }