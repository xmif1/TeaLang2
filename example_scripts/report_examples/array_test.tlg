// Function definition for Power for a single float
auto Pow(x:float, n:int){
    let y:float = 1.0;      // Declare y and set it to 1.0

    while(n > 0){
        n = n - 1;      // Decrement n by 1
        y = y*x;        // Assignment y = y * x;
    }

    while(n < 0){
         n = n + 1;      // Increment n by 1
         y = y/x;        // Assignment y = y / x;
    }

    return y;            //return y and the result
}

// Function definition for Power over an array of floats
auto[] Pow(x:float[], size:int, n:int){
    let y[size]:auto;

    for(let i:int = 0; i < size; i = i + 1){
        y[i] = Pow(x[i], n);
    }

    return y;
}

// Function definition for Power over an array of floats, using overloaded element-wise binary operations
auto[] Pow2(x:float[], size:int, n:int){
    let y[size]:auto = {1.0};

    while(n > 0){
        n = n - 1;              // Decrement n by 1
        y = y*x;                // Assignment y = y * x;
    }

    while(n < 0){
        n = n + 1;             // Increment n by 1
        y = y/x;               // Assignment y = y / x;
    }

    return y;                  //return y and the result
}

let x[5]:float = {1.0, 2.0, 3.0, 4.0, 5.0};
print Pow(x, 5, 2);  // {1.0, 4.0, 9.0, 16.0, 25.0}
print Pow2(x, 5, 2); // {1.0, 4.0, 9.0, 16.0, 25.0}