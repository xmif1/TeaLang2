// Function definition for Sum over an array of floats
auto Sum(x:float[], size:int){
    let y:auto = 0.0;

    for(let i:int = 0; i < size; i = i + 1){
        y = y + x[i];
    }

    return y;
}

tlstruct Vector{
    let v[3]:float = {0.0};

    // sets the components of the 3dim vector
    int Set(v0:float, v1:float, v2:float){
        v[0] = v0;
        v[1] = v1;
        v[2] = v2;

        return 0;
    }

    // calculates v[0]^2 + v[1]^2 + v[2]^2, i.e. the norm squared
    float SquaredNorm(){
        let u[3]:float = {v[0]*v[0], v[1]*v[1], v[2]*v[2]};

        return Sum(u, 3);
    }
}

auto DotProduct(v1:Vector, v2:Vector){
    let u[3]:auto = {v1.v[0] * v2.v[0], v1.v[1] * v2.v[1], v1.v[2] * v2.v[2]};
    return Sum(u, 3);
}

let v:Vector;
v.Set(0.125, 0.25, 0.5);
print v.SquaredNorm(); // 0.328125
print DotProduct(v, v) == v.SquaredNorm(); // true

let u:Vector;
u.Set(1.0, 1.0, 1.0);
print DotProduct(u, v); // 0.875