// Function definition for Power for a single float
auto Pow(x:float, n:int){
    let y:float = 1.0;      // Declare y and set it to 1.0
    if(n > 0){
        for(; n > 0; n = n-1){
            y = y*x;        // Assignment y = y * x;
        }
    }else{
        for(; n < 0; n = n+1){
            y = y/x;        // Assignment y = y/x;
        }
    }

    return y;               //return y and the result
}

// Function definition for Power over an array of floats
auto[] Pow(x:float[], size:int, n:int){
    let y[size]:auto;

    for(let i:int = 0; i < size; i = i + 1){
        y[i] = Pow(x[i], n);
    }

    return y;
}

// Function definition for Power over an array of floats, using element-wise operations
auto[] Pow2(x:float[], size:int, n:int){
    let y[size]:auto = {1.0};

    if(n > 0){
        for(; n > 0; n = n-1){
            y = y*x;        // Assignment y = y * x;
        }
    }else{
        for(; n < 0; n = n+1){
            y = y/x;        // Assignment y = y/x;
        }
    }

    return y;               //return y and the result
}

let x[5]:float = {1.0, 2.0, 3.0, 4.0, 5.0};
print Pow(x, 5, 2);
print Pow2(x, 5, 2);

auto XGreaterY(toCompare:float[]){
    let ans:auto = false;
    if (toCompare[0] > toCompare[1]){
        ans = true;
    }

    return ans;
}

auto XGreaterY(x:float, y:float){
    if(x > y) {return true;} else {return false;}
}

float Average(toAverage:float[], size:int){
    let total:float = 0.0;
    let divisor:float = 0.0;

    for(let i:int = 0; i < size; i = i + 1){
        total = total + toAverage[i];
        divisor = divisor + 1.0;
    }

    return total / divisor;
}

let arr1[2]:float;
let arr2[4]:float = {2.4, 2.8, 10.4, 12.1};

arr1[0] = 22.4;
arr1[1] = 6.25;
print arr1[1];          // 6.25
print XGreaterY(arr1);  // true
print Average(arr2, 4); // 6.92
print XGreaterY(2.0, 3.0);  // false