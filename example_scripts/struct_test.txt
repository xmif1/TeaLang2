tlstruct Vector{
    let v[3]:float = {0.0};

    int Scale(s:float){
        v[0] = v[0]*s;
        v[1] = v[1]*s;
        v[2] = v[2]*s;

        return 0;
    }

    int Translate(t:float[]){
        v = v + t;
        return 0;
    }
}

Vector Add(v1:Vector, v2:Vector){
    let v3:Vector;
    v3.v = v1.v + v2.v;

    return v3;
}

let v1:Vector;
v1.v[0] = 1.0;
v1.v[1] = 2.0;
v1.v[2] = 3.0;

let v2:Vector;
v2.v[0] = 2.0;
v2.v[1] = 1.2;
v2.v[2] = 0.0;

let v3:Vector = Add(v1, v2);
print v3.v[0]; // 3.0
print v3.v[1]; // 3.2
print v3.v[2]; // 2.0

let t[3]:float = {1.0};
v3.Translate(t);

let v4:Vector = Add(v1, v3);
print v4.v(0); // 5.0
print v4.v[1]; // 6.2
print v4.v[2]; // 5.0