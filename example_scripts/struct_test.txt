tlstruct Vector{
    let v[3]:float = {0.0};

    int Scale(s:float){
        v[0] = v[0]*s;
        v[1] = v[1]*s;
        v[2] = v[2]*s;

        return 0;
    }

    int Translate(t:float[]){
        v = v + t;
        return 0;
    }
}

Vector HadamardProduct(v1:Vector, v2:Vector){
    let v3:Vector;
    v3.v = v1.v * v2.v;

    return v3;
}

Vector Add(v1:Vector, v2:Vector){
    let v3:Vector;
    v3.v = v1.v + v2.v;

    return v3;
}

let v1:Vector;
v1.v[0] = 1.0;
v1.v[1] = 2.0;
v1.v[2] = 3.0;

let v2:Vector;
v2.v[0] = 2.0;
v2.v[1] = 1.2;
v2.v[2] = 0.0;

let v3:Vector = Add(v1, v2);
print v3.v[0]; // 3.0
print v3.v[1]; // 3.2
print v3.v[2]; // 3.0

let t[3]:float = {1.0};
v3.Translate(t);

let v4:Vector = Add(v1, v3);
print v4.v[0]; // 5.0
print v4.v[1]; // 6.2
print v4.v[2]; // 7.0

tlstruct Matrix{
    let m[3]:Vector;

    int Transpose(){
        let m_t[3]:Vector;

        for(let i:int = 0; i < 3; i = i+1){
            let r:Vector;

            for(let j:int = 0; j < 3; j = j+1){
                let v:Vector = m[j];
                r.v[j] = v.v[i];
            }

            m_t[i] = r;
        }

        m = m_t;

        return 0;
    }

    int PrintMatrix(){
        print "[";

        for(let i:int = 0; i < 3; i = i+1){
            let v:Vector = m[i];
            print v.v;
        }

        print "]";

        return 0;
    }
}

Matrix HadamardProduct(m1:Matrix, m2:Matrix){
    let m3:Matrix;

    for(let i:int = 0; i < 3; i = i+1){
        m3.m[i] = HadamardProduct(m1.m[i], m2.m[i]);
    }

    return m3;
}

int Copy(m1:Matrix, m2:Matrix){
    for(let i:int = 0; i < 3; i = i+1){
        m1.m[i] = m2.m[i];
    }

    return 0;
}

let m1:Matrix;
m1.m[0] = v1;
m1.m[1] = v2;
m1.m[2] = v3;

let m1_t:Matrix;
Copy(m1_t, m1);

m1_t.Transpose();
m1_t.PrintMatrix();

let hp:Matrix = HadamardProduct(m1, m1_t);
hp.PrintMatrix();